// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trainers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainersServiceClient is the client API for TrainersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainersServiceClient interface {
	AddTrainer(ctx context.Context, in *AddTrainerRequest, opts ...grpc.CallOption) (*AddTrainerResponse, error)
	UpdateTrainer(ctx context.Context, in *UpdateTrainerRequest, opts ...grpc.CallOption) (*UpdateTrainerResponse, error)
	DeleteTrainer(ctx context.Context, in *DeleteTrainerRequest, opts ...grpc.CallOption) (*DeleteTrainerResponse, error)
	GetTrainer(ctx context.Context, in *GetTrainerRequest, opts ...grpc.CallOption) (*GetTrainerResponse, error)
	GetTrainerForPatient(ctx context.Context, in *GetTrainerForPatientRequest, opts ...grpc.CallOption) (*GetTrainerForPatientResponse, error)
	GetAllTrainers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TrainersService_GetAllTrainersClient, error)
}

type trainersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainersServiceClient(cc grpc.ClientConnInterface) TrainersServiceClient {
	return &trainersServiceClient{cc}
}

func (c *trainersServiceClient) AddTrainer(ctx context.Context, in *AddTrainerRequest, opts ...grpc.CallOption) (*AddTrainerResponse, error) {
	out := new(AddTrainerResponse)
	err := c.cc.Invoke(ctx, "/trainers.TrainersService/AddTrainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainersServiceClient) UpdateTrainer(ctx context.Context, in *UpdateTrainerRequest, opts ...grpc.CallOption) (*UpdateTrainerResponse, error) {
	out := new(UpdateTrainerResponse)
	err := c.cc.Invoke(ctx, "/trainers.TrainersService/UpdateTrainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainersServiceClient) DeleteTrainer(ctx context.Context, in *DeleteTrainerRequest, opts ...grpc.CallOption) (*DeleteTrainerResponse, error) {
	out := new(DeleteTrainerResponse)
	err := c.cc.Invoke(ctx, "/trainers.TrainersService/DeleteTrainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainersServiceClient) GetTrainer(ctx context.Context, in *GetTrainerRequest, opts ...grpc.CallOption) (*GetTrainerResponse, error) {
	out := new(GetTrainerResponse)
	err := c.cc.Invoke(ctx, "/trainers.TrainersService/GetTrainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainersServiceClient) GetTrainerForPatient(ctx context.Context, in *GetTrainerForPatientRequest, opts ...grpc.CallOption) (*GetTrainerForPatientResponse, error) {
	out := new(GetTrainerForPatientResponse)
	err := c.cc.Invoke(ctx, "/trainers.TrainersService/GetTrainerForPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainersServiceClient) GetAllTrainers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TrainersService_GetAllTrainersClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrainersService_ServiceDesc.Streams[0], "/trainers.TrainersService/GetAllTrainers", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainersServiceGetAllTrainersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrainersService_GetAllTrainersClient interface {
	Recv() (*GetTrainerResponse, error)
	grpc.ClientStream
}

type trainersServiceGetAllTrainersClient struct {
	grpc.ClientStream
}

func (x *trainersServiceGetAllTrainersClient) Recv() (*GetTrainerResponse, error) {
	m := new(GetTrainerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrainersServiceServer is the server API for TrainersService service.
// All implementations must embed UnimplementedTrainersServiceServer
// for forward compatibility
type TrainersServiceServer interface {
	AddTrainer(context.Context, *AddTrainerRequest) (*AddTrainerResponse, error)
	UpdateTrainer(context.Context, *UpdateTrainerRequest) (*UpdateTrainerResponse, error)
	DeleteTrainer(context.Context, *DeleteTrainerRequest) (*DeleteTrainerResponse, error)
	GetTrainer(context.Context, *GetTrainerRequest) (*GetTrainerResponse, error)
	GetTrainerForPatient(context.Context, *GetTrainerForPatientRequest) (*GetTrainerForPatientResponse, error)
	GetAllTrainers(*emptypb.Empty, TrainersService_GetAllTrainersServer) error
	mustEmbedUnimplementedTrainersServiceServer()
}

// UnimplementedTrainersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrainersServiceServer struct {
}

func (UnimplementedTrainersServiceServer) AddTrainer(context.Context, *AddTrainerRequest) (*AddTrainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrainer not implemented")
}
func (UnimplementedTrainersServiceServer) UpdateTrainer(context.Context, *UpdateTrainerRequest) (*UpdateTrainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrainer not implemented")
}
func (UnimplementedTrainersServiceServer) DeleteTrainer(context.Context, *DeleteTrainerRequest) (*DeleteTrainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrainer not implemented")
}
func (UnimplementedTrainersServiceServer) GetTrainer(context.Context, *GetTrainerRequest) (*GetTrainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainer not implemented")
}
func (UnimplementedTrainersServiceServer) GetTrainerForPatient(context.Context, *GetTrainerForPatientRequest) (*GetTrainerForPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainerForPatient not implemented")
}
func (UnimplementedTrainersServiceServer) GetAllTrainers(*emptypb.Empty, TrainersService_GetAllTrainersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllTrainers not implemented")
}
func (UnimplementedTrainersServiceServer) mustEmbedUnimplementedTrainersServiceServer() {}

// UnsafeTrainersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainersServiceServer will
// result in compilation errors.
type UnsafeTrainersServiceServer interface {
	mustEmbedUnimplementedTrainersServiceServer()
}

func RegisterTrainersServiceServer(s grpc.ServiceRegistrar, srv TrainersServiceServer) {
	s.RegisterService(&TrainersService_ServiceDesc, srv)
}

func _TrainersService_AddTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).AddTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainers.TrainersService/AddTrainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).AddTrainer(ctx, req.(*AddTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainersService_UpdateTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).UpdateTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainers.TrainersService/UpdateTrainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).UpdateTrainer(ctx, req.(*UpdateTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainersService_DeleteTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).DeleteTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainers.TrainersService/DeleteTrainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).DeleteTrainer(ctx, req.(*DeleteTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainersService_GetTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).GetTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainers.TrainersService/GetTrainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).GetTrainer(ctx, req.(*GetTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainersService_GetTrainerForPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainerForPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainersServiceServer).GetTrainerForPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainers.TrainersService/GetTrainerForPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainersServiceServer).GetTrainerForPatient(ctx, req.(*GetTrainerForPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainersService_GetAllTrainers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrainersServiceServer).GetAllTrainers(m, &trainersServiceGetAllTrainersServer{stream})
}

type TrainersService_GetAllTrainersServer interface {
	Send(*GetTrainerResponse) error
	grpc.ServerStream
}

type trainersServiceGetAllTrainersServer struct {
	grpc.ServerStream
}

func (x *trainersServiceGetAllTrainersServer) Send(m *GetTrainerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TrainersService_ServiceDesc is the grpc.ServiceDesc for TrainersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainers.TrainersService",
	HandlerType: (*TrainersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrainer",
			Handler:    _TrainersService_AddTrainer_Handler,
		},
		{
			MethodName: "UpdateTrainer",
			Handler:    _TrainersService_UpdateTrainer_Handler,
		},
		{
			MethodName: "DeleteTrainer",
			Handler:    _TrainersService_DeleteTrainer_Handler,
		},
		{
			MethodName: "GetTrainer",
			Handler:    _TrainersService_GetTrainer_Handler,
		},
		{
			MethodName: "GetTrainerForPatient",
			Handler:    _TrainersService_GetTrainerForPatient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllTrainers",
			Handler:       _TrainersService_GetAllTrainers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trainers.proto",
}
